{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/media/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,eAAe,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,oBAAoB;AAK7F;;GAEG;AACH;IAEE;;;;OAIG;IACH,qBAAoB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;IAAG,CAAC;IAE5C;;;OAGG;IAEH,yCAAmB,GAAnB,cAAsC,MAAM,CAAC,CAAC,CAAC;IAE/C;;;OAGG;IAEH,wCAAkB,GAAlB,cAAqC,MAAM,CAAC,CAAC,CAAC;IAE9C;;;OAGG;IAIH,iCAAW,GAAX,cAAwB,MAAM,CAAC,CAAC,CAAC;IAEjC;;OAEG;IAIH,0BAAI,GAAJ,UAAK,UAGJ,IAAU,CAAC;IAEZ;;OAEG;IAIH,2BAAK,GAAL,cAAgB,CAAC;IAEjB;;OAEG;IAIH,6BAAO,GAAP,cAAkB,CAAC;IAEnB;;;OAGG;IAIH,4BAAM,GAAN,UAAO,YAAoB,IAAU,CAAC;IAEtC;;;OAGG;IAIH,+BAAS,GAAT,UAAU,MAAc,IAAU,CAAC;IAEnC;;OAEG;IAIH,iCAAW,GAAX,cAAsB,CAAC;IAEvB;;OAEG;IAIH,gCAAU,GAAV,cAAqB,CAAC;IAEtB;;OAEG;IAIH,iCAAW,GAAX,cAAsB,CAAC;IAEvB;;OAEG;IAIH,kCAAY,GAAZ,cAAuB,CAAC;IAExB;;OAEG;IAIH,0BAAI,GAAJ,cAAe,CAAC;IAtGhB;QAAC,eAAe,EAAE;;;;0DAAA;IAOlB;QAAC,eAAe,EAAE;;;;yDAAA;IAOlB;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;kDAAA;IAMF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;2CAAA;IASF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;4CAAA;IAMF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;8CAAA;IAOF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;6CAAA;IAOF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;gDAAA;IAMF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;kDAAA;IAMF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;iDAAA;IAMF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;kDAAA;IAMF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;mDAAA;IAMF;QAAC,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;2CAAA;IAGJ,kBAAC;AAAD,CAAC,AArHD,IAqHC;AAoBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiEG;AAQH;IAAiC,+BAAiB;IAAlD;QAAiC,8BAAiB;QAEhD,YAAY;QACZ;;WAEG;QACH,eAAU,GAAW,CAAC,CAAC;QACvB;;WAEG;QACH,mBAAc,GAAW,CAAC,CAAC;QAC3B;;WAEG;QACH,kBAAa,GAAW,CAAC,CAAC;QAC1B;;WAEG;QACH,iBAAY,GAAW,CAAC,CAAC;QACzB;;WAEG;QACH,kBAAa,GAAW,CAAC,CAAC;QAE1B,cAAc;QACd;;WAEG;QACH,sBAAiB,GAAW,CAAC,CAAC;QAC9B;;WAEG;QACH,sBAAiB,GAAW,CAAC,CAAC;QAC9B;;WAEG;QACH,qBAAgB,GAAW,CAAC,CAAC;QAC7B;;WAEG;QACH,6BAAwB,GAAW,CAAC,CAAC;IA4BvC,CAAC;IA1BC;;;;;;;OAOG;IAEH,4BAAM,GAAN,UAAO,GAAW,EAChB,cAA0C,EAC1C,SAAoB,EACpB,OAA4B;QAE1B,6BAA6B;QAC7B,IAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;QACpE,MAAM,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;IAErC,CAAC;IAEI,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAjBA;QAAC,YAAY,EAAE;;;;6CAAA;IAzDjB;QAAC,MAAM,CAAC;YACN,UAAU,EAAE,aAAa;YACzB,IAAI,EAAE,gDAAgD;YACtD,MAAM,EAAE,sBAAsB;YAC9B,SAAS,EAAE,OAAO;SACnB,CAAC;;mBAAA;IAsEF,kBAAC;AAAD,CAAC,AApED,CAAiC,iBAAiB,GAoEjD","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaInstance, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\n\ndeclare var Media: any;\n\n\n/**\n * @hidden\n */\nexport class MediaObject {\n\n  /**\n   * Open a media file\n   * @param src {string} A URI containing the audio content.\n   * @param onStatusUpdate {Function} A callback function to be invoked when the status of the file changes\n   */\n  constructor(private _objectInstance: any) {}\n\n  /**\n   * Get the current amplitude of the current recording.\n   * @returns {Promise<any>} Returns a promise with the amplitude of the current recording\n   */\n  @CordovaInstance()\n  getCurrentAmplitude(): Promise<any> { return; }\n\n  /**\n   * Get the current position within an audio file. Also updates the Media object's position parameter.\n   * @returns {Promise<any>} Returns a promise with the position of the current recording\n   */\n  @CordovaInstance()\n  getCurrentPosition(): Promise<any> { return; }\n\n  /**\n   * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\n   * @returns {number} Returns a promise with the duration of the current recording\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  getDuration(): number { return; }\n\n  /**\n   * Starts or resumes playing an audio file.\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  play(iosOptions?: {\n    numberOfLoops?: number,\n    playAudioWhenScreenIsLocked?: boolean\n  }): void { }\n\n  /**\n   * Pauses playing an audio file.\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  pause(): void { }\n\n  /**\n   * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  release(): void { }\n\n  /**\n   * Sets the current position within an audio file.\n   * @param {number} milliseconds The time position you want to set for the current audio file\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  seekTo(milliseconds: number): void { }\n\n  /**\n   * Set the volume for an audio file.\n   * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  setVolume(volume: number): void { }\n\n  /**\n   * Starts recording an audio file.\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  startRecord(): void { }\n\n  /**\n   * Stops recording\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  stopRecord(): void { }\n\n  /**\n   * Pauses recording\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  pauseRecord(): void { }\n\n  /**\n   * Resumes recording\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  resumeRecord(): void { }\n\n  /**\n   * Stops playing an audio file.\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  stop(): void { }\n\n}\n\nexport type MediaStatusUpdateCallback = (statusCode: number) => void;\n\nexport interface MediaError {\n\n  /**\n   * Error message\n   */\n  message: string;\n\n  /**\n   * Error code\n   */\n  code: number;\n\n}\n\nexport type MediaErrorCallback = (error: MediaError) => void;\n\n/**\n * @name Media\n * @description\n * @usage\n * ```typescript\n * import { MediaPlugin, MediaObject } from '@ionic-native/media';\n *\n *\n * constructor(private media: MediaPlugin) { }\n *\n *\n * ...\n *\n *\n * // Create a MediaPlugin instance.  Expects path to file or url as argument\n * // We can optionally pass a second argument to track the status of the media\n *\n * const onStatusUpdate = (status) => console.log(status);\n * const onSuccess = () => console.log('Action is successful.');\n * const onError = (error) => console.error(error.message);\n *\n * const file: MediaObject = this.media.create('path/to/file.mp3', onStatusUpdate, onSuccess, onError);\n *\n * // play the file\n * file.play();\n *\n * // pause the file\n * file.pause();\n *\n * // get current playback position\n * file.getCurrentPosition().then((position) => {\n *   console.log(position);\n * });\n *\n * // get file duration\n * let duration = file.getDuration();\n * console.log(duration);\n *\n * // skip to 10 seconds (expects int value in ms)\n * file.seekTo(10000);\n *\n * // stop playing the file\n * file.stop();\n *\n * // release the native audio resource\n * // Platform Quirks:\n * // iOS simply create a new instance and the old one will be overwritten\n * // Android you must call release() to destroy instances of media when you are done\n * file.release();\n *\n *\n *\n * // Recording to a file\n * const file: MediaObject = this.media.create('path/to/file.mp3');\n *\n * file.startRecord();\n *\n * file.stopRecord();\n *\n *\n * ```\n * @classes\n * MediaObject\n * @interfaces\n * MediaError\n */\n@Plugin({\n  pluginName: 'MediaPlugin',\n  repo: 'https://github.com/apache/cordova-plugin-media',\n  plugin: 'cordova-plugin-media',\n  pluginRef: 'Media'\n})\n\nexport class MediaPlugin extends IonicNativePlugin {\n\n  // Constants\n  /**\n   * @hidden\n   */\n  MEDIA_NONE: number = 0;\n  /**\n   * @hidden\n   */\n  MEDIA_STARTING: number = 1;\n  /**\n   * @hidden\n   */\n  MEDIA_RUNNING: number = 2;\n  /**\n   * @hidden\n   */\n  MEDIA_PAUSED: number = 3;\n  /**\n   * @hidden\n   */\n  MEDIA_STOPPED: number = 4;\n\n  // error codes\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_ABORTED: number = 1;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_NETWORK: number = 2;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_DECODE: number = 3;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_NONE_SUPPORTED: number = 4;\n\n  /**\n   * Open a media file\n   * @param src {string} A URI containing the audio content.\n   * @param [onStatusUpdate] {MediaStatusUpdateCallback} A callback function to be invoked when the status of the file changes\n   * @param [onSuccess] {Function} A callback function to be invoked after the current play, record, or stop action is completed\n   * @param [onError] {MediaErrorCallback} A callback function is be invoked if an error occurs.\n   * @return {MediaObject}\n   */\n  @CordovaCheck()\n  create(src: string,\n    onStatusUpdate?: MediaStatusUpdateCallback,\n    onSuccess?: Function,\n    onError?: MediaErrorCallback): MediaObject {\n\n      // Creates a new media object\n      const instance = new Media(src, onSuccess, onError, onStatusUpdate);\n      return new MediaObject(instance);\n\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}